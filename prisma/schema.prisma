generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String     @unique
  emailVerified      DateTime?
  image              String?
  ufEmail            String?
  ufEmailVerified    Boolean    @default(false)
  profileCompleted   Boolean    @default(false)
  phoneNumber        String?
  dailyListingCount  Int        @default(0)
  lastListingDate    DateTime?
  otpCode            String?
  otpExpiry          DateTime?
  otpAttempts        Int        @default(0)
  verifyToken        String?
  verifyTokenExpiry  DateTime?
  trustScore         Int        @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  accounts           Account[]
  sessions           Session[]
  listings           Listing[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Listing {
  id          String        @id @default(cuid())
  title       String
  description String?
  price       Float
  category    String?
  condition   String?
  meetingSpot String?
  status      ListingStatus @default(DRAFT)
  expiresAt   DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  images      Image[]
  
  @@map("listings")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  filename  String?
  createdAt DateTime @default(now())
  
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@map("images")
}



model VerificationAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  success   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("verification_attempts")
}

enum ListingStatus {
  DRAFT
  PENDING_INFO
  READY
  PUBLISHED
  EXPIRED
  BLOCKED
  SHADOW_BANNED
}

